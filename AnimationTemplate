import javax.swing.*;
import java.awt.*;
import java.awt.geom.Line2D;
import java.awt.event.*;
import javax.swing.Timer; 
import java.util.ArrayList;
import java.awt.Transparency.*;

public class AnimationTemplate  implements MouseListener, MouseMotionListener, KeyListener{
	public static void main(String[] arg
	) {
		new AnimationTemplate();  
	}
	// Important Website for Transparency  http://zetcode.com/gfx/java2d/transparency/
	// Make sure to fix bullet problem (Bullets dont delete after moving past y-10)
	/****************/
	/* Variables    */
	/****************/
	Font font1 = new Font ("Arial", Font.BOLD, 14);
	
	//window sizes
	static int winWidth =0;  
	static int winHeight =0;


	JPanel mainPanel;  // the main JPanel
	
	//timer
	Timer timerEnemy, timerBullet;
	int timerESpeed = 500; //speed of timer repeats (ms)
	int timerEpause = 1000;  //initial delay (ms)
	int timerBSpeed = 10;
	int timerBpause = 1;  //initial delay (ms)

	boolean onOff=false;
	
	//x and y position of the mouse
	// int mx =50;
	// int my =50;  
	// int mxClick =50;
	// int myClick =50;  

	
	//ship
	Ship ship = new Ship();
	
	//aliens (make an array or  array list)
	Enemy enemy = new Enemy(100,50,80,20);
	
	//list of all the bullets
	ArrayList<Shoot> bulletList = new ArrayList<Shoot>();	
	
	
	/*****************************************
	*   Set up the window (JFrame)           *
	*   and initialize whatever you need to  *
	*****************************************/
	AnimationTemplate() {

		//Setup timers
		ETimerListener etl = new ETimerListener();  
		BTimerListener btl = new BTimerListener();  
		timerEnemy = new Timer(timerESpeed, etl);
		timerEnemy.setInitialDelay(timerEpause);
		timerBullet= new Timer(timerBSpeed, btl);
		//don't set initial delay for bullets
		
		// timer.start(); //moved to after frame is drawn

		JFrame window = new JFrame("Animation Template");
		mainPanel = new GrPanel();
		window.add(mainPanel);

		//add all listeners
		mainPanel.addMouseMotionListener(this);
		mainPanel.addMouseListener(this);
		mainPanel.addKeyListener(this);

		//window setup
		window.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
		//set window size to full screen
		Toolkit tk = Toolkit.getDefaultToolkit();  
		winWidth = ((int) tk.getScreenSize().getWidth());  
		winHeight = ((int) tk.getScreenSize().getHeight());  
		
		window.setSize(winWidth,winHeight);  		
		window.setLocationRelativeTo(null);
		
		ship.y = (int)(winHeight * 0.8);
		ship.x = (int)(winWidth / 1.5);
		
		window.setResizable(false);
		window.setVisible(true);
		timerEnemy.start(); //put this after all of the drawing and setup has been done
		timerBullet.start();
		
	}

	
	
	//JPanel inner class
	private class GrPanel extends JPanel{
		GrPanel() {
			
			this.setBackground(Color.BLACK);
		} 

		//paint components
		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			Graphics2D g2 = (Graphics2D) g;
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			

			/***************************/
			/* Draw all objects here */
			/***************************/
			
			//draw where the mouse is moved
			//g2.setColor(Color.YELLOW);
			//g2.fillOval(mx-4, my-4, 8, 8);
			
			//draw where the mouse is clicked
			//g2.setColor(Color.RED);
			//g2.drawRect(mxClick-10,myClick-10,20,20);
			
			//draw Ship
			//g2.setColor(Color.GREEN);
			//g2.fillRect(ship.x, ship.y, ship.width,ship.height);
			ship.paintIcon(ship.x, ship.y, ship.width,ship.height);
			
			//draw enemy
			g2.setColor(enemy.clr);
			g2.fillRect(enemy.x, enemy.y, enemy.width, enemy.height );
			
			//draw Shoot
			g2.setColor(Shoot.clr);
			for (Shoot b : bulletList)				
			g2.fillRect(b.x, b.y, b.width, b.height );
		}
		
		
		//draw something that flashes on and off each second
		/*
			if (onOff) {
				g.setFont(font1);
				g.setColor(Color.WHITE);
				g.drawString("Move mouse,     Click mouse,   or press arrow keys",180,20);
			}
			*/
	}



	/****************************/
	/* All event listeners here */
	/****************************/
	public void mouseMoved(MouseEvent e) {
		// mx = e.getX();
		// my = e.getY();
		// mainPanel.repaint();
	}

	public void mouseClicked(MouseEvent e) {
		// mxClick = e.getX();
		// myClick = e.getY();
		// mainPanel.repaint();
	}
	public void mousePressed(MouseEvent e) {} 
	public void mouseExited(MouseEvent e) {} 

	public void mouseEntered(MouseEvent e) {
		// mainPanel.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR)); //change the mouse cursor
		mainPanel.requestFocus();
	}

	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		//if (e.getKeyCode() == 16) SHIFTON = true;
		
		System.out.println(key); //DEBUG to find keycodes 
		
		if (key == 37) {	
			if (ship.x > 0) {
				ship.x -= 20;  //left arrow  
			}
		}
		if (key == 39)  {
			if(ship.x < (winWidth - ship.width)) {
				ship.x += 20;  //right arrow
			}
		}
		if (key == 32) {	//spacebar
			//add another bullet to the screen. 
			//position the bullet at the top of the ship	
			Shoot bullet = new Shoot(ship.x + 24, ship.y - 12, 2, 12);
			bulletList.add(bullet);
			
			
		}
		mainPanel.repaint(); 

	}
	public void keyReleased(KeyEvent e) {
		//if (e.getKeyCode() == 16) SHIFTON = false; //just releasing the shift key
		//else key=0;		
		//mainPanel.repaint();
	}

	public void mouseReleased(MouseEvent e) {}
	public void mouseDragged(MouseEvent e) {}
	public void keyTyped(KeyEvent e) {}

	//###############################################
	//inner class for Timer Listener
	private class ETimerListener implements ActionListener {  
		public void actionPerformed(ActionEvent e) {

			/***************************/
			/* All timer tasks here    */
			/***************************/
			//do something
			//onOff = !onOff;
			moveEnemies();
			mainPanel.repaint();			
		}
	}  //end of inner class

	/**********************************/
	/* put and special functions here */
	/**********************************/
	void moveEnemies(){
		//move all of the enemies
		enemy.x += enemy.xspeed;
		if (enemy.x > 920) {	//use a variable for screenwidth
			enemy.y +=25; //move it down
			enemy.xspeed = -enemy.xspeed;
		}
		
		enemy.x += enemy.xspeed;
		if (enemy.x <=0 ) {	//use a variable for screenwidth
			enemy.y +=25; //move it down
			enemy.xspeed = -enemy.xspeed;
		}

	} //end of moveStuff

	private class BTimerListener implements ActionListener {  
		public void actionPerformed(ActionEvent e) {			
			/* All timer tasks here    */			
			//move bullet.
			//the timer moves the bullets up the screen
			//	checks to see if it hits any of the enemies
			//	and if it moves off the screen, delete the bullet
			for( Shoot s : bulletList) {
				s.y -=10;
			//	if (s.y < 10) bulletList.remove(s); // movetoa separate loop
			}
			mainPanel.repaint();			
		}
	}  //end of inner class


}



